from repo_util import clone_repo, get_all_code_files
from document_indexer import split_file_into_chunks, embed_chunks
from retriever import retrieve_relevant_chunks

def main():
    print("üîó Git RAG System")
    # repo_url = input("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ").strip()
    repo_url = "https://github.com/Beatrice451/metahuman"

    # –®–∞–≥ 1. –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    print("üì• –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
    repo_path = clone_repo(repo_url)

    # –®–∞–≥ 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    code_files = get_all_code_files(repo_path)
    print(f"üìÇ –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(code_files)}")

    # –®–∞–≥ 3. –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —á–∞–Ω–∫–∏
    chunks = []
    for file in code_files:
        chunks.extend(split_file_into_chunks(file))

    print(f"‚úÇÔ∏è –ü–æ–ª—É—á–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")

    # –®–∞–≥ 4. –°–æ–∑–¥–∞—ë–º embedding –¥–ª—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤
    embeddings = embed_chunks(chunks)
    print("‚úÖ Embedding –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

    # –®–∞–≥ 5. –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    while True:
        question = input("\nüí¨ –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ").strip()
        if question.lower() in ["exit", "quit"]:
            break

        # –®–∞–≥ 6. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
        top_chunks = retrieve_relevant_chunks(question, embeddings)

        print("\nüîé –ù–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã:")
        for chunk in top_chunks:
            print(f"\nüìÑ {chunk['source']}")
            print(chunk["text"])

if __name__ == "__main__":
    main()
